!function(global) {
    
    var sti={
         moveRatio:0.3,
         touchMoveDisabled:false,
         autoRotate:0,
         rigid:0.17,
         quaternion:{},
         frames:0,
         fisheye:false,
         cubeSize : 1024,
         rz:0,
         ry : 0,       // Rotate * degree around y axis
         rx : 0,       // Rotate * degree around x axis
         maxfov : 120, // Max field of view (degree)
         minfov : 60,  // Min field of view (degree)
         fov : 90,     // Default field of view
    };
    global.sti= global.sti|| sti;
    var camera,scene,renderer;
    var boxMaterials=[];
    var suspects=[];
    var sprites={};
    var _ry;
    var _rx;
    var _overdraw=1;
    var imgRotates=[0,0,0,0,0,0];
    //qxzhsy
    //012345
    //yzsxhq
    //524130
    var imgIndexConvert=[3,0,4,1,5,2];
    THREE.ImageUtils.crossOrigin='*';

    var spotsIndex=[];
    var mouseDownX;
    var mouseDownRx;
    var mouseDownRy;
    var mouseDownY;
    var isMouseDown=false;

    var tween= new TWEEN.Tween(sti).easing(TWEEN.Easing.Quartic.Out);
    
    var imgLoaded=0;
    function loadLQImgs(){
        var imgLoader=THREE.ImageUtils;
        for(var index =0;index<6;++index){
            var i=imgIndexConvert[index];
            //预览图
            var imgUrl=sti.cdnPath+'/images/scenes/'+sti.scene_key+'/allinone.jpg?imageMogr2/gravity/NorthWest/crop/!'+sti.cubeSize+'x'+sti.cubeSize+'a0a'+(sti.cubeSize*i)+'/rotate/'+imgRotates[i]+'/interlace/0/thumbnail/!10p';
            if(boxMaterials.length<6){
    	        boxMaterials.push( new THREE.MeshBasicMaterial( {
    	        	map: imgLoader.loadTexture(imgUrl,THREE.UVMapping,imgOnload),
                    overdraw:_overdraw
    	        } ) );
            }else{
    	        boxMaterials[index].map= imgLoader.loadTexture(imgUrl,THREE.UVMapping,imgOnload);
            }
        }
    }
    function loadHQImgs(){
        var imgLoader=THREE.ImageUtils;
        for(var index=0;index<6;++index){
            var i=imgIndexConvert[index];
            var key=sti.scene_key;
            //高清图
            var imgUrl=sti.cdnPath+'/images/scenes/'+key+'/allinone.jpg?imageMogr2/gravity/NorthWest/crop/!'+sti.cubeSize+'x'+sti.cubeSize+'a0a'+(sti.cubeSize*i)+'/rotate/'+imgRotates[i]+'/interlace/1/thumbnail/!100p';
            !function(index,key){
                var img;
                function onload(){
                    if(key!=sti.scene_key){
                        return;
                    }
                    scene.children[0].material.materials[index].map=img;
                }
                img=imgLoader.loadTexture(imgUrl,THREE.UVMapping,onload);
            }(index,key);
        }
    }
    function imgOnload(){
        imgLoaded++;
        if(imgLoaded==6){
            if(sti.loaderDom){
                sti.loaderDom.hide();
            }
            loadHQImgs();
        }
    }
    function loadArrow(initFov){
    	console.log("loadArrow function is running");
        var size=10;
        var loader=THREE.ImageUtils;
        var geometry = new THREE.PlaneGeometry( size, size );
        //geometry.scale( - 1, 1, 1 );
        geometry.applyMatrix(new THREE.Matrix4().makeScale(-1,1,1));
        
	    var material = new THREE.MeshBasicMaterial( {
            transparent:true,
            //箭头图片
	    	map: loader.loadTexture('http://qncdn.sz-sti.com//images/tools/arrow.png?imageView2/2/w/308/h/210/interlace/1/q/100',THREE.UVMapping,function(){}),
            overdraw:_overdraw
	    } );

	    var mesh = new THREE.Mesh( geometry, material );

        mesh.rotateY(0);
        mesh.rotateX(Math.PI/2);
        mesh.position.set(0,-10,30);

        mesh.data={id: 4722, text: 'CF', scene_id: 4636, position_x: -84.5662, position_y: -32.9014};
        mesh.data.objectType='spot';
        mesh.name='spots';
        sprites[mesh.name]=true;
        
        suspects.push(mesh);
	    scene.add( mesh );
        var text=genText(0,-10,42*0.99,"北",100);
        text.name='spots_text';
        sprites[text.name]=true;
        scene.add(text);
    }
    function loadSpots(spots){
    	loadArrow();
        var size=20;
        var loader=THREE.ImageUtils;
        for(var i in spots){
            var geometry = new THREE.PlaneGeometry( size, size );
            //geometry.scale( - 1, 1, 1 );
            geometry.applyMatrix(new THREE.Matrix4().makeScale(-1,1,1));
            
    	    var material = new THREE.MeshBasicMaterial( {
                transparent:true,
                //漫游图片
    	    	map: loader.loadTexture(sti.cdnPath+'/images/tools/spot'+spots[i].type+'.png?imageMogr2/gravity/NorthWest/crop/!128x128a0a'+(0)+'/interlace/0/thumbnail/!100p',THREE.UVMapping,function(){}),
                overdraw:_overdraw
    	    } );
    
    	    var mesh = new THREE.Mesh( geometry, material );
    
            mesh.rotateY(Math.PI/2-spots[i].ry*Math.PI/180);
            mesh.rotateX(spots[i].rx*Math.PI/180);
            mesh.position.set(spots[i].position_x,spots[i].position_y,spots[i].position_z);

            mesh.data=spots[i];
            mesh.data.objectType='spot';
            mesh.name='spots'+spots[i].id;
            sprites[mesh.name]=true;
            
            suspects.push(mesh);
    	    scene.add( mesh );
            var text=genText(spots[i].position_x*0.99,spots[i].position_y+7,spots[i].position_z*0.99,spots[i].text,120);

            text.name='spots_text'+spots[i].id;
            sprites[text.name]=true;
            scene.add(text);
        }
    }
    function loadTrademark(trademark){
        var mesh=genDisk(0,200,0,100,trademark);
        mesh.name='trademark'+new Date().valueOf();
        sprites[mesh.name]=true;
        scene.add(mesh);
    }
    function loadAdvertisement(ad){
        ad=ad.replace(/"/g,'');
        ad=ad.replace(/<div>/g,'');
        ad=ad.split('</div>');
        var text1=ad.length>0?ad[0]:'';
        var text2=ad.length>1?ad[1]:'';
        var text3=ad.length>2?ad[2]:'';

        if(text2+text3==''||
           text1+text3==''||
           text2+text1==''
                ){
            text2=text1||text2||text3;
            text1='';
            text3='';
        }

        var distance=15;
        if(text1){
            var ad1=genText(1,-100,distance,text1,120,-90,'#666666');
            ad1.name='ad1'+new Date().valueOf();
            sprites[ad1.name]=true;
            scene.add(ad1);
        }
        if(text2){
        	if(text2=='null'){text2='速腾聚创'};
            var ad2=genText(1,-100,1,text2,120,-90,'#666666');
            ad2.name='ad2'+new Date().valueOf();
            sprites[ad2.name]=true;
            scene.add(ad2);
        }
        if(text3){
            var ad3=genText(1,-100,-distance,text3,120,-90,'#666666');
            ad3.name='ad3'+new Date().valueOf();
            sprites[ad3.name]=true;
            scene.add(ad3);
        }

        var mesh=genDisk(0,-200,0,100);
        mesh.name='advertisement'+new Date().valueOf();
        sprites[mesh.name]=true;
        scene.add(mesh);
    }
    function genDisk(x,y,z,r,imgUrl){
        y=sti.fisheye?y*2.5:y;
        r=sti.fisheye?r*2.5:r;
        var geom=new THREE.CircleGeometry(r,50);
        var mat = new THREE.MeshBasicMaterial({color:0xffffff,side:THREE.DoubleSide,overdraw:_overdraw});
        if(imgUrl){
            var imgLoader=THREE.ImageUtils;
            mat = new THREE.MeshBasicMaterial({map:imgLoader.loadTexture(imgUrl,THREE.UVMapping,function(){}),side:THREE.DoubleSide,transparent:true,overdraw:_overdraw});
        }
        var mesh = new THREE.Mesh(geom, mat);
        var rotation=position2Rotation(z,x,y);
        mesh.applyMatrix(
                new THREE.Matrix4().makeTranslation(x,y,z).multiply(new THREE.Matrix4().makeRotationY(rotation[1]).multiply(new THREE.Matrix4().makeRotationX(rotation[0]+Math.PI/2))));
        return mesh;
    }
    function genText(x,y,z,text,size,rotationX,color){
        size=sti.fisheye?size*5:size;
        x=sti.fisheye?x*5:x;
        y=sti.fisheye?y*5:y;
        z=sti.fisheye?z*5:z;
        var rate=20;
    
        var canvas = document.createElement("canvas");
        var context=canvas.getContext('2d');
        var ch=parseInt(canvas.height);
        var cw=parseInt(canvas.width);
        function drawCanvas(text,size){
            context=canvas.getContext('2d');
            context.font = size+"px STHeiti";
            if(!color){
                context.shadowOffsetX = 5;
                context.shadowOffsetY = 5;
                context.shadowBlur = 20;
                context.shadowColor = 'rgba(0,0,0,1)';
                context.fillStyle = '#fff';
            }else{
                context.fillStyle = color;
            }
            context.textAlign='center';
            context.textBaseline='middle';
        }
        drawCanvas(text,size);
        canvas.width=parseInt(context.measureText(text).width+10);
        ch=parseInt(canvas.height);
        cw=parseInt(canvas.width);
        drawCanvas(text,size);
        context.font = 'Microsoft YaHei';
        context.fillText(text,cw/2,ch/2);
    
        var geom=new THREE.PlaneGeometry(cw/rate,ch/rate, 1, 1);
        var cTexture=new THREE.Texture(canvas);
        var mat = new THREE.MeshBasicMaterial({map:cTexture,transparent:true,overdraw:_overdraw});
        cTexture.needsUpdate=true;
        var mesh = new THREE.Mesh(geom, mat);
    
        mesh.position.set(x,y,z);
        var arc=Math.acos(z/Math.pow(x*x+z*z,0.5));
        if(x<0){
            arc=2*Math.PI-arc;
        }
    
        if(rotationX){
            rotationX=rotationX*Math.PI/180;
            mesh.rotation.x=rotationX;
        }else{
            mesh.rotation.y=arc+Math.PI;
        }
    
        return mesh;
    }
    function _init(config) {
        imgLoaded=0;
        for(var i in config){
            sti[i]=config[i];
        }
        for(var i in sprites){
            scene.remove(scene.getObjectByName(i));
        }
        sprites={};
        var rx=sti.rx;
        var ry=sti.ry;
        if(sti.times>0){
            loadLQImgs();
            loadSpots(config.spots);
            loadAdvertisement(config.advertisement);
            loadTrademark(config.trademark);
            loadComments(config.comments);
            return;
        }
    
    	var container = document.getElementById( 'container' );
    
    	camera = new THREE.PerspectiveCamera( sti.fov,$(container).width() / $(container).height(), 1, 1100 );
    	camera.target = new THREE.Vector3( 0, 0, 0 );
        sti.camera=camera;
    
    	scene = new THREE.Scene();
    
        var size=sti.cubeSize;
        var precision=1;
    	var geometry = new THREE.BoxGeometry( size, size,size,precision,precision,precision);
        loadLQImgs();
        var material= new THREE.MeshFaceMaterial(boxMaterials);
        var mesh = new THREE.Mesh( geometry, material );
        mesh.scale.x=-1;

        scene.add( mesh );
        if(sti.fisheye){
            for ( var j = 0, l = mesh.geometry.vertices.length; j < l; j ++ ) {
                var vertex = mesh.geometry.vertices[ j ];
                vertex.normalize();
                vertex.multiplyScalar( 550 );
            }
        }

        if(!isAndroid()){
            loadSpots(config.spots);
        }
        // if(config.advertisement){
        //     loadAdvertisement(config.advertisement);
        // }
        // if(config.trademark){
        //     loadTrademark(config.trademark);
        // }
        loadComments(config.comments);
    
        renderer = sti.renderer=='canvas'? new THREE.CanvasRenderer(): new THREE.WebGLRenderer();
        
    	renderer.setPixelRatio( window.devicePixelRatio );
    	renderer.setSize(  $(container).width() , $(container).height() );
    	container.appendChild( renderer.domElement );
    
        if(checkMobile()){
            container.addEventListener( 'touchstart', onDocumentMouseDown, false );
            container.addEventListener( 'touchmove', onDocumentMouseMove, false );
            container.addEventListener( 'touchend', onDocumentMouseUp, false );
        }else{
            container.addEventListener( 'mousedown', onDocumentMouseDown, false );
            container.addEventListener( 'mousemove', onDocumentMouseMove, false );
            container.addEventListener( 'mouseup', onDocumentMouseUp, false );
            container.addEventListener( 'mousewheel', onDocumentMouseWheel, false );
            //container.addEventListener( 'DOMMouseScroll', onDocumentMouseWheel, false);
        }
    
        animate();
    }
    
    function onDocumentMouseDown( event ) {
    
    	event.preventDefault();
    
        isMouseDown=true;
        var x=parseInt(event.clientX>=0?event.clientX:event.changedTouches[0].clientX);
        var y=parseInt(event.clientY>=0?event.clientY:event.changedTouches[0].clientY);
    	mouseDownX=x;
    	mouseDownY =y;
    	mouseDownRy = sti.ry;
    	mouseDownRx = sti.rx;
    
    }

    
    function onDocumentMouseMove( event ) {

        if(!isMouseDown||sti.touchMoveDisabled){
            return;
        }

        var x=parseInt(event.clientX>=0?event.clientX:event.touches[0].pageX);
        var y=parseInt(event.clientY>=0?event.clientY:event.touches[0].pageY);

        if(event.touches&&event.touches.length>1){
            return;
        }

        _ry = ( mouseDownX - x ) * sti.moveRatio+mouseDownRy;
        _rx = ( y - mouseDownY) * sti.moveRatio + mouseDownRx;
        _rx=_rx>=90?89:_rx;
        _rx=_rx<=-90?-89:_rx;
    
        /*
        tween
            .to({ry:_ry,rx:_rx},300)
            .start();
            */
        sti.rx=_rx;
        sti.ry=_ry;
    }
    
    function onDocumentMouseUp( event ) {
        isMouseDown=false;
        var x=parseInt(event.clientX>=0?event.clientX:event.changedTouches[0].pageX);
        var y=parseInt(event.clientY>=0?event.clientY:event.changedTouches[0].pageY);

        if(distance2D(x,y,mouseDownX,mouseDownY)<5){//单击
            var raycaster=new THREE.Raycaster();
            var mouse = new THREE.Vector2();
            mouse.set( ( x / window.innerWidth ) * 2 - 1, - ( y / window.innerHeight ) * 2 + 1 );
            raycaster.setFromCamera( mouse, camera );
            var intersects = raycaster.intersectObjects( suspects);
            if ( intersects.length !=0 ) {
                sti.onObjectClick(intersects[0].object.data);
            }
        }
    }
    
    function onDocumentMouseWheel( event ) {
    
    	// WebKit
    
    	if ( event.wheelDeltaY ) {
    
    		sti.fov -= event.wheelDeltaY * 0.05;
    
    	// Opera / Explorer 9
    
    	} else if ( event.wheelDelta ) {
    
    		sti.fov -= event.wheelDelta * 0.05;
    
    	// Firefox
    
    	} else if ( event.detail ) {
    
    		sti.fov += event.detail * 1.0;
    
    	}
        sti.fov=sti.fov>sti.maxfov?sti.maxfov:sti.fov;
        sti.fov=sti.fov<sti.minfov?sti.minfov:sti.fov;

    }
    
    function animate() {
    
    	requestAnimationFrame( animate );
    	//TWEEN.update();
    	update();
    
    }
    
    function update() {
    
    	sti.ry += sti.autoRotate;

        var rx=sti.rx;
        var ry=sti.ry;
        var rz=sti.rz*Math.PI/180;

        if(sti.fisheye){
            ry = THREE.Math.degToRad(  ry+180 );
            rx = THREE.Math.degToRad(  -rx);
        }else{
            ry = THREE.Math.degToRad(  ry);
            rx = THREE.Math.degToRad(  rx-90);
        }

        camera.autoUpdateMatrix = false;

        var q = new THREE.Quaternion().setFromAxisAngle( new THREE.Vector3(0,-1,0),ry);
        rx+=Math.PI/2;
        q = new THREE.Quaternion().multiplyQuaternions(q,new THREE.Quaternion().setFromAxisAngle( new THREE.Vector3(1,0,0),rx));
        q = new THREE.Quaternion().multiplyQuaternions(q,new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0,0,1),rz));

        var newQuaternion = new THREE.Quaternion();
        //if(sti.vr&&sti.quaternion){
        //    q=new THREE.Quaternion(sti.quaternion.w,sti.quaternion.x,sti.quaternion.y,sti.quaternion.z);
        //}
        THREE.Quaternion.slerp( camera.quaternion, q, newQuaternion, sti.rigid );
        camera.quaternion.copy(newQuaternion);
        camera.quaternion.normalize();

        if(sti.fisheye){
    	    camera.target.x = 500 * Math.sin( rx) * Math.cos( ry);
    	    camera.target.y = 500 * Math.cos( rx);
    	    camera.target.z = 500 * Math.sin( rx) * Math.sin( ry);
            camera.position.copy( camera.target ).negate();
    	    camera.lookAt( camera.target );
        }

        camera.fov=sti.fov;
    	camera.updateProjectionMatrix();
    	renderer.render( scene, camera );
    }

    function _setFov(fov){
        sti.fov=fov;
        sti.fov=sti.fov>sti.maxfov?sti.maxfov:sti.fov;
        sti.fov=sti.fov<sti.minfov?sti.minfov:sti.fov;
    }
    function _setRx(rx){
        sti.rx=rx;
    }
    function _setRy(ry){
        sti.ry=ry;
    }
    function _setRz(rz){
        sti.rz=rz;
    }
    function _setQuaternion(w,x,y,z){
        sti.quaternion={
            w:w,
            x:x,
            y:y,
            z:z
        }
    }
    function genMosaic(x,y,z,size){
        //马赛克
        return genDisk(x,y,z,size,'http://qncdn.sz-sti.com/images/tools/smile.png?imageMogr2/rotate/180');
    }
    function loadComments(comments){
        for(var i in comments){
            if(comments[i].is_description){
                var mesh=genText(comments[i].position_x,comments[i].position_y,comments[i].position_z,comments[i].text,120);
                mesh.name='comments'+comments[i].id;
                sprites[mesh.name]=true;
                scene.add(mesh);
            }else if(comments[i].is_mosaic){
                var mesh=genMosaic(comments[i].position_x,comments[i].position_y,comments[i].position_z,comments[i].is_mosaic*10);
                mesh.name='comments'+comments[i].id;
                sprites[mesh.name]=true;
                scene.add(mesh);
            }else{
                console.log("Comment disabled");
            }
        }
    }
    $.extend(global.sti,{
       setFov: _setFov,
       setRx: _setRx,
       setRy: _setRy,
       setRz: _setRz,
       setQuaternion:_setQuaternion,
       init: _init,
       loadSpots: loadSpots,
       loadComments: loadComments
    });
}(window);
