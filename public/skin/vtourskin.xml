<krpano>
	<!-- krpano 1.18.3 - Default Virtual Tour Skin -->

	<!-- Global Skin settings (can be overridden in the 'outer' xml) -->
	<skin_settings maps="false"
	               littleplanttintro="true"
	               loadingtext="loading..."
	               maps_type="bing"
	               maps_bing_api_key=""
	               maps_zoombuttons="false"
	               gyro="true"
	               title="true"
	               thumbs="true"
	               thumbs_width="120" thumbs_height="90" thumbs_padding="10" thumbs_crop="0|40|240|160"
	               thumbs_opened="true"
	               thumbs_text="false"
	               thumbs_dragging="true"
	               thumbs_onhoverscrolling="false"
	               thumbs_scrollbuttons="false"
	               thumbs_scrollindicator="false"
	               thumbs_loop="false"
	               tooltips_thumbs="false"
	               tooltips_hotspots="false"
	               tooltips_mapspots="false"
	               loadscene_flags="MERGE"
	               loadscene_blend="BLEND(0.5)"
	               controlbar_offset="60"
	               />


	<!-- Skin Styles -->

	<!-- skin_base - the base skin image -->
	<style name="skin_base" url="/skin/vtourskin.png?v=1" />
	<style name="sprtestyle" url="http://qncdn.sz-sti.com/images/tool/sprites.png" />

    <style name="hotspot_arrow0" url="http://qncdn.sz-sti.com/images/tools/spot0.png" scale="0.6" framewidth="128" frameheight="128" frame="0" lastframe="19" onloaded="hotspot_animate();" />
    <style name="hotspot_arrow1" url="http://qncdn.sz-sti.com/images/tools/spot1.png" framewidth="128" frameheight="128" frame="0" lastframe="19" onloaded="hotspot_animate();" />
    <style name="hotspot_arrow2" url="http://qncdn.sz-sti.com/images/tools/spot2.png" framewidth="128" frameheight="128" frame="0" lastframe="19" onloaded="hotspot_animate();" />
    <style name="hotspot_arrow3" url="http://qncdn.sz-sti.com/images/tools/spot3.png" framewidth="128" frameheight="128" frame="0" lastframe="19" onloaded="hotspot_animate();" />
    <style name="hotspot_arrow4" url="http://qncdn.sz-sti.com/images/tools/spot4.png" framewidth="128" frameheight="128" frame="0" lastframe="19" onloaded="hotspot_animate();" />
    <style name="hotspot_arrow5" url="http://qncdn.sz-sti.com/images/tools/spot5.png" framewidth="128" frameheight="128" frame="0" lastframe="19" onloaded="hotspot_animate();" />
    <style name="hotspot_arrow6" url="http://qncdn.sz-sti.com/images/tools/spot6.png" framewidth="128" frameheight="128" frame="0" lastframe="19" onloaded="hotspot_animate();" />
    <style name="hotspot_arrow7" url="http://qncdn.sz-sti.com/images/tools/spot7.png" framewidth="128" frameheight="128" frame="0" lastframe="19" onloaded="hotspot_animate();" />
    <action name="hotspot_animate">
        inc(frame,1,get(lastframe),0);
        mul(ypos,frame,frameheight);
        txtadd(crop,'0|',get(ypos),'|',get(framewidth),'|',get(frameheight));
        delayedcall(0.08, if(loaded, hotspot_animate() ) );
    </action>

	<!-- skin_glow - button glowing, if ondown/onup events were needed, then ondown2/onup2 need to be used instead when using this style -->
	<style name="skin_glow"
	       ondown="copy(skin_lockglow,name); skin_buttonglow(get(name)); if(ondown2, ondown2() );"
	       onover="if(skin_lockglow === null, copy(skin_lockglow,name); skin_buttonglow(get(name),0.3) ); "
	       onout="if(skin_lockglow === name, ifnot(pressed, skin_buttonglow(null);delete(skin_lockglow); ));"
	       onup="if(hovering, skin_buttonglow(get(name),0.3), skin_buttonglow(null);delete(skin_lockglow); ); if(onup2, onup2() );"
	       />

	<!-- skin_thumbtext_style - style/textfield for the (optional, skin_settings.thumbs_text) thumbnails texts -->
	<style name="skin_thumbtext_style" url="http://qncdn.sz-sti.com/document/plugins/textfield.swf" align="bottom" width="100%" autoheight="true" y="5" enabled="false" background="false" border="false" css="text-align:center; color:#FFFFFF; font-family:黑体; font-size:14px;" textshadow="1" />

	<!-- skin_hotspotstyle - style for the hotspots (note - the onclick event will be overwritten here and can't be set directly at the hotspot! the hotspots need to have a 'linkedscene' attribute to be clickable) -->

	<style name="skin_hotspotstyle" edge="center" oy="0" distorted="false"
	       tooltip=""
	       onclick="if(linkedscene, skin_hidetooltips(); tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); );"
	       />	
	<style name="bottom_hotspotstyle" url="bottom_hotspot.png" edge="center" oy="0" distorted="false" tooltip=""
	       />

































	<!-- skin_tooltip - style for the thumb, hotspot and mapspot tooltips -->
	<style name="skin_tooltips"
	       onover="copy(layer[skin_tooltip].html, tooltip);
	               set(layer[skin_tooltip].visible, true);
	               tween(layer[skin_tooltip].alpha, 1.0, 0.1);
	               asyncloop(hovering, 
		               mul(hw, layer[skin_tooltip].width, 0.5);
		               add(aw, mouse.stagex, hw);
		               sub(sw, mouse.stagex, hw);
		               if(aw GT stagewidth,
			               sub(saw, stagewidth, hw);
			               sub(saw, 3);
			               copy(layer[skin_tooltip].x,saw);
			               ,
			               if(sw LT 0, 
				               add(layer[skin_tooltip].x, hw, 3);
				               ,
				               copy(layer[skin_tooltip].x, mouse.stagex);
			               )
					   );
		               copy(layer[skin_tooltip].y,mouse.stagey); 
	               );"
	       onout="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false));"
	       />

































	<!-- include VR support -->
	<include url="../plugins/webvr.xml" devices="html5" />

	<!-- overwrite some settings from the webvr.xml for the skin integration -->
	<plugin name="WebVR" keep="true" devices="html5"
	        multireslock.desktop="true"
	        multireslock.mobile.or.tablet="false"
	        mobilevr_fake_support="true"
	        onavailable="removelayer(webvr_enterbutton); skin_arrange_buttons(); webvr_onavailable();"
	        onentervr="skin_showloading(false); webvr_onentervr(); webvr_setup();"
	        onexitvr="webvr_onexitvr(); webvr_setup();"
	        />

	        
	<plugin name="soundinterface" url="/plugins/soundinterface.swf" alturl="/plugins/soundinterface.js" rootpath="" preload="true" keep="true" />

	<!-- webvr button style (adjust to match default skin style) -->
	<style name="webvr_button_style"
	       border="false"
	       shadow="0.01" shadowrange="9.0" shadowcolor="0xFFFFFF" shadowalpha="0.5"
	       />

	<!-- show a 'rotate the device' info when the mobile device is in portrait mode in VR mode -->
	<layer name="webvr_rotate_to_landscape_request" keep="true" vr="true" devices="mobile"
	       url="rotate_device.png" scale="0.5"
	       align="top" edge="center" y="28%"
	       autoalpha="true" alpha="0.0"
	       enabled="false"
	       />

	<events name="webvr_events" keep="true" devices="html5"
	        onresize.mobile="webvr_act_as_gyro_in_portrait_mode();"
	        onviewchange=""
	        />

	<action name="webvr_setup">
		if(webvr.isenabled,
			set(display.hotspotrenderer, webgl);
			copy(loadscene_flags_backup, skin_settings.loadscene_flags);
			set(skin_settings.loadscene_flags, MERGE|KEEPVIEW|KEEPMOVING|NOPREVIEW);
			webvr_act_as_gyro_in_portrait_mode(true);
			if(scene.count GT 1,
				set(hotspot[webvr_prev_scene].visible, true);
				set(hotspot[webvr_next_scene].visible, true);
				set(events[webvr_events].onviewchange, webvr_menu_following());
				,
				set(hotspot[webvr_prev_scene].visible, false);
				set(hotspot[webvr_next_scene].visible, false);
			);
		  ,
			set(display.hotspotrenderer, auto);
			if(loadscene_flags_backup !== null, copy(skin_settings.loadscene_flags, loadscene_flags_backup));
			tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);
			set(hotspot[webvr_prev_scene].visible, false);
			set(hotspot[webvr_next_scene].visible, false);
			set(events[webvr_events].onviewchange, null);
		);
	</action>

	<action name="webvr_act_as_gyro_in_portrait_mode">
		if(device.mobile AND webvr.isenabled,
			div(aspect, stagewidth, stageheight);
			if(aspect != lastaspect OR '%1' == 'true',
				copy(lastaspect, aspect);
				if(stagewidth GT stageheight,
					<!-- landscape mode - use stereo rendering and a direct/fast gyro sensor mode -->
					set(display.stereo, true);
					set(webvr.mobilevr_sensor_mode, 3);
					webvr.update();
					tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);
				  ,
					<!-- portrait mode - use normal rendering and a smoother/slower gyro sensor mode -->
					set(display.stereo, false);
					set(webvr.mobilevr_sensor_mode, 1);
					webvr.update();
					tween(layer[webvr_rotate_to_landscape_request].alpha, 1.0);
					delayedcall(3.0, tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 1.0); );
					);
				);
		  ,
			set(lastaspect, 0);
		  );
	</action>


	<!-- VR scene switching hotspots -->
	<style name="webvr_menu_style" depth="800" scale="0.5" distorted="true" ath="0" atv="45" alpha="0.5" />
	<hotspot name="webvr_prev_scene" keep="true" style="skin_base|webvr_menu_style" crop="0|64|64|64"  ox="-64" onover="tween(scale,0.6);" onout="tween(scale,0.5);" vr_timeout="750" onclick="skin_nextscene_loop(-1);js(skin_nextscene_loop(-1));" visible="false" devices="html5.and.webgl" />
	<hotspot name="webvr_next_scene" keep="true" style="skin_base|webvr_menu_style" crop="64|64|64|64" ox="+64" onover="tween(scale,0.6);" onout="tween(scale,0.5);" vr_timeout="750" onclick="skin_nextscene_loop(+1);js(skin_nextscene_loop(+1));" visible="false" devices="html5.and.webgl" />

	<!-- floating/following VR hotspots -->
	<action name="webvr_menu_following" type="Javascript" devices="html5"><![CDATA[
		var hs1 = krpano.get("hotspot[webvr_prev_scene]");
		var hs2 = krpano.get("hotspot[webvr_next_scene]");
		if(!hs1.hovering && !hs2.hovering)
		{
			var f = 0.01;	// follow speed factor
			var h = krpano.view.hlookat;
			var v = krpano.view.vlookat;
			var hsh = hs1.ath;
			var hsv = hs1.atv;
			h   = (h  -(h|0))   + (((h|0)  +360180)%360) - 180.0;
			v   = (v  -(v|0))   + (((v|0)  +360180)%360) - 180.0;
			hsh = (hsh-(hsh|0)) + (((hsh|0)+360180)%360) - 180.0;
			var dh = h - hsh;
			dh += (dh > 180) ? -360 : (dh < -180) ? 360 : 0
			hsh += dh*f;
			var a = Math.abs(v - hsv) / 90.0;
			a = 1.0 * Math.max(1.0 - 2.0*Math.sqrt(a), 0);
			v = v + 55.0 - v*1.5;
			hsv = hsv*(1.0 - f) + v*f;
			hs1.ath = hs2.ath = hsh;
			hs1.atv = hs2.atv = hsv;
			hs1.alpha = hs2.alpha = a;
		}
	]]></action>
	<!-- VR support -->

































	<!-- the tooltip textfield -->
	<!-- 导航单元的样式 -->
	<layer name="skin_tooltip" keep="true"
	       url="http://qncdn.sz-sti.com/document/plugins/textfield.swf"
	       parent="STAGE" zorder="200"
	       visible="false" alpha="0" enabled="false"
	       align="lefttop" edge="bottom" oy="-2" autoheight="true"
	       background="true" backgroundcolor="0x000000" backgroundalpha="0.5"
	       border="true" bordercolor="0xFFFFFF" borderalpha="1" borderwidth="2" roundedge="4"
	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
	       textshadow="1" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
	       css="text-align:center; margin:0 10px; color:#FFFFFF; line-height:26px; font-family:黑体; font-weight:500; font-size:14px;"
	       html=""
	       />




































	<!-- context menu -->
	<contextmenu>
		<item name="fs" caption="FULLSCREEN" />
	</contextmenu>


	<!-- Skin Layout -->
	<layer name="skin_scroll_window" type="container" keep="true" align="leftbottom" width="100%" height="100%" x="0" y="60" y_opened="60" y_closed="-2" maskchildren="true">
		<layer name="skin_scroll_layer" type="container" align="leftbottom" width="100%" height="100%" x="0" y="-100%">
			<layer name="skin_scroll_container" type="container" bgcolor="0x000000" bgalpha="0.3" align="lefttop" width="100%" height="100%" x="0" y="0" maskchildren="true">
				<layer name="skin_thumbs_container" type="container" align="lefttop" width="100%" height="500%" visible="false">
					<layer name="skin_thumbs_scrollleft"  style="skin_base|skin_glow" crop="0|64|64|64"  align="lefttop"  edge="left"  x="5" y="50" scale="0.5" zorder="2" alpha="1.0" ondown2="asyncloop(pressed, layer[skin_thumbs].scrollby(+2,0));" visible="false" />
					<layer name="skin_thumbs_scrollright" style="skin_base|skin_glow" crop="64|64|64|64" align="righttop" edge="right" x="5" y="50" scale="0.5" zorder="2" alpha="1.0" ondown2="asyncloop(pressed, layer[skin_thumbs].scrollby(-2,0));" visible="false" />
					<layer name="skin_thumbs_scrollindicator" type="container" bgcolor="0xFFFFFF" bgalpha="0.25" align="lefttop" width="0" y="100" height="4" visible="false" enabled="false" />
					<layer name="skin_thumbs" state="closed" url="http://qncdn.sz-sti.com/document/plugins/scrollarea.swf" alturl="http://qncdn.sz-sti.com/document/plugins/scrollarea.js" direction="h" align="top" width="100%" height="100" zorder="1" onloaded="skin_updatescroll();" onscroll="skin_updatethumbscroll();" />
				</layer>
				<layer name="skin_map" state="closed" url="" visible="false" align="lefttop" width="100%" height="50%" x="0" y="0" zorder="1" lat="0" lng="0" zoom="10" bgalpha="0" maptype="satellite" onmapready="skin_addmapspots();">
					<maptypecontrol visible="true" align="righttop" x="5" y="5" buttonalign="v" />
					<radar visible="false" headingoffset="0" />
					<spotstyle name="DEFAULT" url="vtourskin_mapspot.png" activeurl="vtourskin_mapspotactive.png" edge="bottom" x="-5" y="-8" scale="0.5" />
					<layer name="skin_map_zoom_in"  style="skin_base" visible="false" crop="9|512|46|64"  align="right" x="0" y="-40" zorder="2" ondown="layer[skin_map].zoomin();  skin_buttonglow(get(name));" onup="skin_buttonglow(null);" />
					<layer name="skin_map_zoom_out" style="skin_base" visible="false" crop="73|512|46|64" align="right" x="0" y="+40" zorder="2" ondown="layer[skin_map].zoomout(); skin_buttonglow(get(name));" onup="skin_buttonglow(null);" />
				</layer>
			</layer>
		</layer>
	</layer>

	<layer name="skin_control_bar" keep="true" type="container" bgcolor="0x000000" bgalpha="0" align="centerbottom" width="100%" height="40" x="0" y="0" y_opened="20" y_closed="-42" zorder="3">
<!-- 		<layer name="skin_btn_thumbs" style="sprtestyle|skin_glow" crop="314|181|88|88"  align="leftbottom"  x="15" y="-10" scale="0.4" ondown2="skin_showmap(false); skin_showthumbs();" /> -->
<!-- 		<layer name="skin_btn_vr"    style="skin_base|skin_glow" crop="90|10|70|44"    align="centerbottom"  x="0" y="10"  scale="0.5" onclick="webvr.enterVR();js(enterVr());" visible="false" /> -->
		<layer name="skin_btn_hold"    style="skin_base|skin_glow"  crop="0|576|64|64"    align="centerbottom"  x="0" y="-10" visible="false" scale="0.5" onclick="copy(sourceurl,browser.location);subtxt(sceneurl, sourceurl, 0, 72);openurl(get(sceneurl),_blank);" />
<!-- 		<layer name="skin_btn_title" url="http://qncdn.sz-sti.com/document/plugins/textfield.swf" align="lefttop" edge="leftbottom" width="95%" height="32" autoheight="true" x="50" y="45" zorder="4" enabled="false" background="false" border="false" css="text-align:left; color:#FFFFFF; font-family:黑体; font-weight:bold; font-size:14px;" textshadow="1" html="选择场景" /> -->
	</layer>

	<layer name="skin_loadingtext"  keep="true" url="http://qncdn.sz-sti.com/document/plugins/textfield.swf"
		   align="center" x="5" y="-5" visible="false" autoheight="true"
           background="true" backgroundcolor="0x000000" backgroundalpha="0.5"
           border="true" bordercolor="0xFFFFFF" borderalpha="1" borderwidth="2" roundedge="4"
           shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
           textshadow="1" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
           css="text-align:center; margin:5px 10px;; color:#FFFFFF; line-height:26px; font-family:黑体; font-weight:500; font-size:14px;overflow: hidden;" 
           html="加载中"/>

	<layer name="skin_buttonglow"   keep="true" style="skin_base" crop="64|384|64|64" align="center" x="0" y="1" alpha="0.0" visible="false" enabled="false" />
	<layer name="skin_thumbborder"  keep="true" url="vtourskin_thumbborder.png" visible="false" enabled="false" align="lefttop" scale="0.35" ox="-2" oy="-2" />
	<layer name="skin_logo"         keep="true" url="" align="righttop" x="5" y="5" capture="false" accuracy="1" state="small" onclick="if(state == 'small', skin_openlogo(); , skin_closelogo('now'); opened_onclick(); );" />

	<plugin name="skin_gyro"  keep="true" url="" html5_url="/plugins/gyro2.js" devices="html5" enabled="false" camroll="true" friction="0" velastic="0" onavailable="if(device.fullscreensupport, if(device.mobile,add(layer[skin_btn_gyro].x,40),add(layer[skin_btn_gyro].x,20));); if(view.vlookatrange == 180, set(layer[skin_btn_gyro].visible,true));" />



	<!-- Skin Events -->

	<events name="skin_events" keep="true"
	        onxmlcomplete="set(events[skin_events].onxmlcomplete,null); skin_startup();"
	        onnewpano="skin_update_scene_infos(); skin_deeplinking_update_url();"
	        onremovepano="skin_showloading(true);"
	        onloadcomplete="skin_showloading(false);"
	        onresize="skin_onresize();"
	        onidle="skin_deeplinking_update_url();"
	        />

	<events name="skin_events" devices="fullscreensupport"
	        onenterfullscreen="set(layer[skin_btn_fs].crop, '64|576|64|64');"
	        onexitfullscreen="set(layer[skin_btn_fs].crop, '0|576|64|64');"
	        />

	<events name="musicevents" onnewpano="indexoftxt(result, get(scene[get(xml.scene)].bgmusic),sound);
						if(result GE 0,tween(sound[bgsnd].volume, 0.5);
						playsound(bgs,get(scene[get(xml.scene)].bgmusic),1,tween(sound[bgsnd].volume, 1)));" onremovepano="stopsound(bgs);"
			/>

	<events name="nadirlogorotation"
	        onviewchange="if(hotspot[nadirlogo].rotatewithview, set(hotspot[nadirlogo].rotate,get(view.hlookat)) );"
	        />


	<!-- Alternative small screen layout for mobile devices (override/extend settings) -->
	<krpano devices="mobile">
		<layer name="skin_scroll_window" y="120" y_opened="100" y_closed="-4">
			<layer name="skin_scroll_layer">
				<layer name="skin_topborder" height="24" />
				<layer name="skin_title" css="text-align:left; color:#FFFFFF; font-family:黑体; font-weight:bold; font-size:30px;" />
				<layer name="skin_scroll_container">
					<layer name="skin_thumbs_container">
						<layer name="skin_thumbs_scrollleft"  scale="1" />
						<layer name="skin_thumbs_scrollright" scale="1" />
						<layer name="skin_thumbs_scrollindicator" height="6" />
						<layer name="skin_thumbs" height="200" />
					</layer>
				</layer>
			</layer>
		</layer>

		<layer name="skin_control_bar" height="64" y="0" y_opened="0" y_closed="-70">
			<layer name="skin_btmborder"  visible="false" />
			<layer name="skin_btn_thumbs" scale="0.6" y="-5" align="left" x="15" />
			<layer name="skin_btn_title" keep="true"  css="font-size:24px; color:#FFFFFF;" x="70" y="45"/>
			<layer name="skin_btn_vr"     x="0" y="0" scale="0.8" />
		</layer>

		<layer name="skin_loadingtext" css="text-align:center; color:#FFFFFF; font-family:McicroSoft Yahei; font-weight:bold; font-size:26px; font-style:italic;" />
		<layer name="skin_buttonglow"  scale="2.0" />
		<layer name="skin_thumbborder" scale="0.7" />

		<style name="skin_thumbtext_style" css="text-align:center; color:#FFFFFF; font-family:黑体; font-weight:bold; font-size:24px;" />
	</krpano>


	<!-- Skin Actions -->

	<action name="add_all_the_time_tooltip">
	    txtadd(tooltipname, 'tooltip_', get(name));
	    addplugin(get(tooltipname));
	    txtadd(plugin[get(tooltipname)].parent, 'hotspot[', get(name), ']');
	    set(plugin[get(tooltipname)].url,'http://qncdn.sz-sti.com/document/plugins/textfield.swf');
	    set(plugin[get(tooltipname)].align,top);
	    set(plugin[get(tooltipname)].edge,top);
	    set(plugin[get(tooltipname)].x,0);
	    set(plugin[get(tooltipname)].y,0);
	    set(plugin[get(tooltipname)].width,80);
	    set(plugin[get(tooltipname)].autoheight,true);
	    set(plugin[get(tooltipname)].background,true);
	    set(plugin[get(tooltipname)].backgroundcolor,0x000000);
	    set(plugin[get(tooltipname)].roundedge,15);
	    set(plugin[get(tooltipname)].backgroundalpha,0.5);
	    set(plugin[get(tooltipname)].border,true);
	    set(plugin[get(tooltipname)].glow,4);
	    set(plugin[get(tooltipname)].glowcolor,0xFFFFFF);
	    set(plugin[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:黑体; font-weight:bold; font-size:12px;');
	    set(plugin[get(tooltipname)].textshadow,1);
	    set(plugin[get(tooltipname)].textshadowrange,6.0);
	    set(plugin[get(tooltipname)].textshadowangle,90);
	    copy(plugin[get(tooltipname)].html,scene[get(linkedscene)].title);
	    set(plugin[get(tooltipname)].enabled,false);	
	</action>

	<action name="skin_startup">
		if(device.mobile == false,
			copy(layer[skin_control_bar].y, skin_settings.controlbar_offset);
			copy(layer[skin_control_bar].y_opened, skin_settings.controlbar_offset);
			add(layer[skin_scroll_window].y, layer[skin_control_bar].height, layer[skin_control_bar].y);
			add(layer[skin_scroll_window].y_opened, layer[skin_control_bar].height, layer[skin_control_bar].y_opened);

			if(skin_settings.thumbs,
				if(skin_settings.thumbs_opened, set(layer[skin_thumbs].state,'opened'); set(layer[skin_thumbs_container].visible,true); );
			
				copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);

				if(skin_settings.thumbs_onhoverscrolling,
					if(device.mouse, set(layer[skin_thumbs].draggable, false));
					set(layer[skin_thumbs].onhover_autoscrolling, true);
				  );
			);
		);

		skin_addthumbs();
		skin_onresize();
		skin_updatescroll();

		copy(usegyro, skin_settings.gyro);
		if(device.desktop, set(usegyro, false));
		if(device.flash, set(usegyro, false));
		if(usegyro, copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url); );

		if(skin_settings.maps == true,
			set(layer[skin_btn_map].visible, true);
			copy(layer[skin_map_zoom_in].visible,  skin_settings.maps_zoombuttons);
			copy(layer[skin_map_zoom_out].visible, skin_settings.maps_zoombuttons);
			
			if(device.flash,
				copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
				set(layer[skin_map].url, 'http://qncdn.sz-sti.com/document/plugins/bingmaps.swf');
			  ,
				if(skin_settings.maps_type == 'bing', 
					copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
					set(layer[skin_map].url, 'http://qncdn.sz-sti.com/plugins/bingmaps.js'); 
				  ,
					set(layer[skin_map].url, 'http://qncdn.sz-sti.com/plugins/googlemaps.js'); 
				  );
			  );
		  ,
			if(device.mobile, copy(layer[skin_btn_gyro].x, layer[skin_btn_map].x) );
		  );
	</action>


	<action name="skin_deeplinking_update_url">
		if(skin_settings.deeplinking AND (!webvr OR webvr.isenabled === false),
			copy(adr, browser.location);
			indexoftxt(qi, get(adr), '?');
			if(qi GT 0, subtxt(adr, adr, 0, get(qi)));
			copy(si, scene[get(xml.scene)].index);
			copy(h, view.hlookat);
			copy(v, view.vlookat);
			copy(f, view.fov);
			copy(d, view.distortion);
			copy(a, view.architectural);
			clamp(d, 0.0, 1.0);
			clamp(a, 0.0, 1.0);
			set(pp, calc(f LT 10 ? 6 : 2));
			roundval(h, get(pp));
			roundval(v, get(pp));
			roundval(f, get(pp));
			roundval(d, 2);
			roundval(a, 1);
			set(adr, calc(adr + '?startscene=' + si + '&amp;startactions=lookat('+h+','+v+','+f+','+d+','+a+');'));
			js( history.replaceState(null, document.title, get(adr)); );
		  );
	</action>














































	<action name="skin_addthumbs">
		if(skin_settings.thumbs == false, 
			set(layer[skin_btn_thumbs].visible,false);
		  ,
			copy(thumbwidth, skin_settings.thumbs_width);
			copy(thumbheight, skin_settings.thumbs_height);
			copy(thumbpadding, skin_settings.thumbs_padding);
			copy(thumbcrop, skin_settings.thumbs_crop);
	
			if(device.mobile,
				mul(thumbwidth,2);
				mul(thumbheight,2);
				mul(thumbpadding,2);
			);


			mul(thumbpadding,0.7);
	
			add(thumbxoffset, thumbwidth, thumbpadding);
			mul(thumbxcenter, thumbxoffset, 0.5);
			mul(thumbbarwidth, thumbxoffset, scene.count);
			add(thumbbarwidth, thumbpadding);
			add(thumbbarheight, thumbpadding, thumbheight);
			add(thumbbarheight, thumbpadding);
	
			if(skin_settings.thumbs_scrollindicator,
				copy(layer[skin_thumbs_scrollindicator].y, thumbbarheight);
				add(thumbbarheight, layer[skin_thumbs_scrollindicator].height);
			);


			mul(thumbxoffset,0.7);

			mul(thumbbarheight,0.735);
			mul(thumbbarwidth,0.7);
	
			copy(layer[skin_thumbs].height, thumbbarheight);
			copy(layer[skin_thumbs].width, thumbbarwidth);
	
			mul(halfheight, thumbbarheight, 0.5);
			copy(layer[skin_thumbs_scrollleft].y, halfheight);
			copy(layer[skin_thumbs_scrollright].y, halfheight);


			mul(thumbwidth,0.7);
			mul(thumbheight,0.7);
	
			for(set(i,0), i LT scene.count, inc(i),
				txtadd(thumbname,'skin_thumb_',get(i));
				addlayer(get(thumbname));
				copy(layer[get(thumbname)].url, scene[get(i)].thumburl);
				set(layer[get(thumbname)].keep, true);
				set(layer[get(thumbname)].parent, 'skin_thumbs');
				set(layer[get(thumbname)].align, lefttop);
				if(scene[get(i)].selfthumb == 'true',
					copy(layer[get(thumbname)].crop, thumbcrop);,
					copy(layer[get(thumbname)].crop, '0|0|900|600');
				);
				copy(layer[get(thumbname)].width, thumbwidth);
				copy(layer[get(thumbname)].height, thumbheight);
				mul(thumbx, i, thumbxoffset);
				add(thumbx, thumbpadding);
				copy(layer[get(thumbname)].x, thumbx);
				copy(layer[get(thumbname)].y, thumbpadding);
				add(scene[get(i)].thumbx, thumbx, thumbxcenter);
				copy(scene[get(i)].thumby, thumbpadding);
				set(layer[get(thumbname)].linkedscene, get(scene[get(i)].name) );
				set(layer[get(thumbname)].onclick, copy(layer[skin_thumbborder].parent, name); looktocenter(get(view.hlookat), get(view.vlookat)); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); );
				if(skin_settings.tooltips_thumbs,
					set(layer[get(thumbname)].tooltip, get(scene[get(i)].title) );
					layer[get(thumbname)].loadstyle(skin_tooltips);
				);
				if(skin_settings.thumbs_text,
					txtadd(thumbtext, 'skin_thumbtext_', get(i));
					addlayer(get(thumbtext));
					layer[get(thumbtext)].loadstyle(skin_thumbtext_style);
					set(layer[get(thumbtext)].keep, true);
					set(layer[get(thumbtext)].parent, get(thumbname));
					set(layer[get(thumbtext)].html, get(scene[get(i)].title));
				);
		    );
	    );
	</action>




















	<action name="skin_addmapspots">
		for(set(i,0), i LT scene.count, inc(i),
			if(scene[get(i)].lat,
				txtadd(spotname, 'spot', get(i));
				txtadd(spotclickevent, 'skin_hidetooltips(); activatespot(',get(spotname),'); loadscene(', get(scene[get(i)].name), ',null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); delayedcall(0.5,skin_showmap(false));');
				copy(scene[get(i)].mapspotname, spotname);
				addspot(get(spotname), get(scene[get(i)].lat), get(scene[get(i)].lng), get(scene[get(i)].heading), false, get(spotclickevent), null);
				if(skin_settings.tooltips_mapspots,
					set(layer[skin_map].spot[get(spotname)].tooltip, get(scene[get(i)].title) );
					txtadd(layer[skin_map].spot[get(spotname)].onover, 'set(hovering,true);',  get(style[skin_tooltips].onover) );
					txtadd(layer[skin_map].spot[get(spotname)].onout,  'set(hovering,false);', get(style[skin_tooltips].onout)  );
				  );
			  );
		  );

		if(xml.scene != null,
			activatespot( get(scene[get(xml.scene)].mapspotname) );
		  ,
			activatespot(spot0);
		  );

		zoomToSpotsExtent();
	</action>

	<action name="skin_onresize">
		layer[rec_thumbs].setcenter(0,0);
		mul(mh, area.pixelheight, -1);
		if(layer[skin_thumbs].state == 'opened', add(mh,layer[skin_thumbs].height); );
		if(layer[skin_map].state == 'opened', sub(hh,area.pixelheight,skin_settings.controlbar_offset); sub(hh,layer[skin_control_bar].height); sub(hh,32); copy(layer[skin_map].height, hh); add(mh,hh); );
		set(layer[skin_scroll_layer].y, get(mh));
		ifnot(device.mobile, if(area.pixelwidth LT 480, skin_showbuttons(false), skin_showbuttons(true)); );
	</action>

	<action name="skin_arrange_buttons">
		<!-- determine the visibility of the buttons and calculate their positions -->

		calc(show_vrbutton,   webvr.isavailable == true);

		if(show_vrbutton, dec(cpos,24));

		if(show_dirbuttons,

			set(layer[skin_btn_vr].align, center);
			copy(layer[skin_btn_vr].visible, show_vrbutton);
			copy(layer[skin_btn_vr].x, cpos);
		  ,

			set(layer[skin_btn_vr].align, center);
			copy(layer[skin_btn_vr].visible, show_vrbutton);
			copy(layer[skin_btn_vr].x, lpos);
			if(show_vrbutton, inc(lpos,80));
		  );
	</action>

	<action name="skin_showbuttons">
		set(layer[skin_btn_lt].visible, %1);
		set(layer[skin_btn_rt].visible, %1);
		set(layer[skin_btn_up].visible, %1);
		set(layer[skin_btn_dn].visible, %1);
		set(layer[skin_btn_in].visible, %1);
		set(layer[skin_btn_ou].visible, %1);
		if(%1 == true,
			if(plugin[skin_gyro].available == true AND view.vlookatrange == 180, set(layer[skin_btn_gyro].visible, true), set(layer[skin_btn_gyro].visible, false) );
		  ,
			set(layer[skin_btn_gyro].visible, false);
			set(layer[skin_btn_fs].visible, false);
		  );
	</action>

	<action name="skin_updatescroll">
		if(layer[skin_thumbs].loaded,
			set(cursceneindex, 0);
			if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index));
			layer[skin_thumbs].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
		  );
	</action>

	<action name="skin_updatethumbscroll">
		copy(padding,skin_settings.thumbs_padding);
		if(device.mobile, mul(padding,2));

		if(skin_settings.thumbs_scrollbuttons,
			if(loverflow GT 0, set(layer[skin_thumbs_scrollleft].visible,true),  set(layer[skin_thumbs_scrollleft].visible,false) );
			if(roverflow GT 0, set(layer[skin_thumbs_scrollright].visible,true), set(layer[skin_thumbs_scrollright].visible,false) );
		);

		if(skin_settings.thumbs_scrollindicator,
			if(woverflow GT 0,
				set(layer[skin_thumbs_scrollindicator].visible,true);
				sub(iw,pixelwidth,woverflow);
				div(pw,iw,pixelwidth);
				div(px,loverflow,woverflow);
				mul(pw,iw);
				copy(layer[skin_thumbs_scrollindicator].width,pw);
				sub(iw,pw);
				sub(iw,padding);
				sub(iw,padding);
				mul(px,iw);
				add(px,padding);
				copy(layer[skin_thumbs_scrollindicator].x,px);
			  ,
				set(layer[skin_thumbs_scrollindicator].visible,false);
			  );
		  );
	</action>

	<action name="skin_update_scene_infos">
		if(xml.scene !== null,
			if(scene[get(xml.scene)].index GE 0,
				if(skin_settings.title,
					if(title, txtadd(layer[skin_title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
					delayedcall(0.1, set(layer[skin_title].visible,true) );
				  );

				if(skin_settings.thumbs_loop == false,
					if(scene[get(xml.scene)].index GT 0,
						set(layer[skin_btn_prev].enabled, true);
						set(layer[skin_btn_prev].alpha, 1.0);
					  ,
						set(layer[skin_btn_prev].enabled, false);
						set(layer[skin_btn_prev].alpha, 0.3);
					  );

					sub(lastsceneindex, scene.count, 1);
					if(scene[get(xml.scene)].index LT lastsceneindex,
						set(layer[skin_btn_next].enabled, true);
						set(layer[skin_btn_next].alpha, 1.0);
					  ,
						set(layer[skin_btn_next].enabled, false);
						set(layer[skin_btn_next].alpha, 0.3);
					  );
				  ,
					if(scene.count GT 1,
						set(layer[skin_btn_prev].enabled, true);
						set(layer[skin_btn_prev].alpha, 1.0);
						set(layer[skin_btn_next].enabled, true);
						set(layer[skin_btn_next].alpha, 1.0);
					  ,
						set(layer[skin_btn_prev].enabled, false);
						set(layer[skin_btn_prev].alpha, 0.3);
						set(layer[skin_btn_next].enabled, false);
						set(layer[skin_btn_next].alpha, 0.3);
					  );
				  );

				txtadd(parentname, 'skin_thumb_', get(scene[get(xml.scene)].index));
				if(layer[get(parentname)],
					set(layer[skin_thumbborder].parent, get(parentname));
					set(layer[skin_thumbborder].visible, true);
				  ,
					set(layer[skin_thumbborder].visible, false);
				  );

				if(scene[get(xml.scene)].mapspotname,
					layer[skin_map].activatespot(get(scene[get(xml.scene)].mapspotname));
					layer[skin_map].pantospot(get(scene[get(xml.scene)].mapspotname));
				  );
				
				if(plugin[skin_gyro].available == true AND view.vlookatrange == 180, 
					set(layer[skin_btn_gyro].visible, true);
				  , 
					set(layer[skin_btn_gyro].visible, false) 
				);
			  );
		  );
	</action>

	<action name="skin_nextscene">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		if(newsceneindex GE 0,
			if(newsceneindex LT scene.count,
				txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));
				layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
				loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend));
			);
		);
	</action>

	<action name="skin_nextscene_loop">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		sub(lastsceneindex, scene.count, 1);
		if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
		if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
		layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
		loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend));
	</action>

	<action name="skin_showloading">
		set(layer[skin_loadingtext].visible, %1);
	</action>

	<action name="skin_hidetooltips">
		set(layer[skin_tooltip].alpha,0.0);
		set(layer[skin_tooltip].visible,false);
	</action>

	<action name="skin_buttonglow">
		if(%1 != null,
			set(strength,0.7);
			if(%2 != null, set(strength,%2));
			set(layer[skin_buttonglow].parent, %1);
			set(layer[skin_buttonglow].visible, true);
			tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
		  ,
			tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default, set(layer[skin_buttonglow].parent, null); set(layer[skin_buttonglow].visible, false); );
		  );
	</action>

	<action name="skin_hideskin">
		if(layer[skin_map].state != 'closed', skin_showmap(false); wait(0.4); );
		if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false); wait(0.25); );
		tween(layer[skin_scroll_window].y, get(layer[skin_scroll_window].y_closed), 0.5, easeOutQuint);
		tween(layer[skin_control_bar].y, get(layer[skin_control_bar].y_closed), 0.5, easeOutQuint);
		set(layer[skin_btn_show].visible,true);
		tween(layer[skin_btn_show].alpha, 1, 0.25, easeOutQuint);
	</action>

	<action name="skin_showskin">
		tween(layer[skin_scroll_window].y, get(layer[skin_scroll_window].y_opened), 0.5, easeOutQuint);
		tween(layer[skin_control_bar].y, get(layer[skin_control_bar].y_opened), 0.5, easeOutQuint);
		set(layer[skin_btn_show].visible,false);
		tween(layer[skin_btn_show].alpha,0,0);
	</action>

	<action name="skin_showthumbs">
		if(%1 == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(layer[skin_scroll_layer].y == -100%, copy(layer[skin_scroll_layer].y,mh));
		if(show,
			set(layer[skin_thumbs].state, 'opened');
			add(mh, layer[skin_thumbs].height);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
			set(layer[skin_thumbs_container].visible, true);
			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
			rec_showthumbs(false);
		  ,
			set(layer[skin_thumbs].state, 'closed');
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
		  );
	</action>
</krpano>